{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/making-our-own-alpine-nodejs-container",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"making-our-own-nodejs-alpine-container\" style=\"position:relative;\"><a href=\"#making-our-own-nodejs-alpine-container\" aria-label=\"making our own nodejs alpine container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making our own Node.js Alpine container</h2>\n<p>Let's take this exercise a bit further. Let's actually make our own Node.js Alpine container. NOTE: I'd suggest always using the official one. They'll keep it up to date with security fixes and they're <em>real</em> good at making containers. Better than I am, anyway. But this is a good exercise for us to go through to learn how to install system dependencies.</p>\n<p>Start with this in a new Dockerfile. You can call it <code class=\"language-text\">my-node.Dockerfile</code>. Some people will insist it should be <code class=\"language-text\">Dockerfile.my-node</code> but the former doesn't break syntax highlighting and it doesn't matter since Docker doesn't actually care.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> alpine:3.10</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apk add --update nodejs npm</span></code></pre></div>\n<p><code class=\"language-text\">alpine:latest</code> would nab you the latest Alpine (3.10 as of writing, if you run into issues with versions, continue with <code class=\"language-text\">alpine:3.10</code> instead of <code class=\"language-text\">alpine:latest</code>. Otherwise feel free to truck on with <code class=\"language-text\">alpine:latest</code>)</p>\n<p><code class=\"language-text\">RUN apk add --update nodejs npm</code> will use the Alpine package manager to grab Node.js and npm (they're bundled separately for Alpine.)</p>\n<p>If you encounter error like this</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/home/node/code/node_modules/@hapi/hapi/lib/core.js:51\n    actives <span class=\"token operator\">=</span> new WeakMap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                                   // Active requests being processed\n            ^\n\nSyntaxError: Unexpected token <span class=\"token operator\">=</span></code></pre></div>\n<p>Try using <code class=\"language-text\">nodejs-current</code> instead of <code class=\"language-text\">nodejs</code></p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apk add --update nodejs-current npm</span></code></pre></div>\n<p>Okay so now if you do <code class=\"language-text\">docker build -t my-node -f my-node.Dockerfile .</code> it'll build your new image. <code class=\"language-text\">-t</code> is <code class=\"language-text\">--tag</code> and <code class=\"language-text\">-f</code> is <code class=\"language-text\">--file</code> which is what tells Docker is the name of your Dockerfile you're using (otherwise it assumes you're using a file called exactly <code class=\"language-text\">Dockerfile</code>.) Now try <code class=\"language-text\">docker run -it my-node</code>. In here you should have a pretty bare bones Linux container but both <code class=\"language-text\">node -v</code> and <code class=\"language-text\">npm -v</code> should work.</p>\n<p>Keep in mind that Alpine does not use bash for its shell; it uses a different shell called <code class=\"language-text\">ash</code> or often just <code class=\"language-text\">sh</code>. It's similar enough to bash but there are some differences. It's not really the point of this class so we'll keep the focus on learning just what's necessary.</p>\n<p>Let's next make our <code class=\"language-text\">node</code> user.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> alpine:3.10</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apk add --update nodejs npm</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> addgroup -S node &amp;&amp; adduser -S node -G node</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">USER</span> node</span></code></pre></div>\n<p>I'm mimicking what the Node.js official container does, which is make a user group of <code class=\"language-text\">node</code> with one user in it, <code class=\"language-text\">node</code>. Feel free to name them different things if you feel so inclined. Notice we could conceivably combine the two <code class=\"language-text\">RUN</code> instructions together but it's generally best practices to keep \"ideas\" separate. The first <code class=\"language-text\">RUN</code> installs dependencies, the second one creates the <code class=\"language-text\">node</code> user. Up to you how you do it, neither is wrong per se.</p>\n<p>Now we can just copy the rest from the previous Dockerfile! Let's do that.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> alpine:3.10</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apk add --update nodejs npm</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> addgroup -S node &amp;&amp; adduser -S node -G node</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">USER</span> node</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> mkdir /home/node/code</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /home/node/code</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--chown</span><span class=\"token punctuation\">=</span><span class=\"token string\">node:node</span></span> package-lock.json package.json ./</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm ci</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--chown</span><span class=\"token punctuation\">=</span><span class=\"token string\">node:node</span></span> . .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"node\"</span>, <span class=\"token string\">\"index.js\"</span>]</span></code></pre></div>\n<p>It works! We're down to 56MB (compared to 86MB with the official <code class=\"language-text\">node:12-alpine</code> container). Honestly, I'm not entirely sure what we cut out from the other <code class=\"language-text\">node:12-alpine</code> container but it's probably important. Again, I'd stick to the official containers where they exist. But hey, we learned how to add a user and install system dependencies! Let's make it even small because why the hell not.</p>","frontmatter":{"path":"/making-our-own-alpine-nodejs-container","title":"Making Our Own Alpine Node.js Container","order":5.1,"section":"Making Tiny Containers","description":"As an exercise to understand what goes into making a container from scratch, Brian shows how to create a Node.js container from the base Alpine container."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":1,"path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":2,"path":"/what-are-containers","title":"What Are Containers?"}}},{"node":{"frontmatter":{"order":2.1,"path":"/chroot","title":"chroot"}}},{"node":{"frontmatter":{"order":2.2,"path":"/namespaces","title":"Namespaces"}}},{"node":{"frontmatter":{"order":2.3,"path":"/cgroups","title":"cgroups"}}},{"node":{"frontmatter":{"order":3,"path":"/getting-set-up-with-docker","title":"Getting Set Up with Docker"}}},{"node":{"frontmatter":{"order":3.1,"path":"/docker-images-without-docker","title":"Docker Images without Docker"}}},{"node":{"frontmatter":{"order":3.2,"path":"/docker-images-with-docker","title":"Docker Images with Docker"}}},{"node":{"frontmatter":{"order":3.3,"path":"/nodejs-on-docker","title":"Node.js on Docker"}}},{"node":{"frontmatter":{"order":3.4,"path":"/tags","title":"Tags"}}},{"node":{"frontmatter":{"order":3.5,"path":"/docker-cli","title":"Docker CLI"}}},{"node":{"frontmatter":{"order":4,"path":"/dockerfile","title":"Intro to Dockerfiles"}}},{"node":{"frontmatter":{"order":4.1,"path":"/build-a-nodejs-app","title":"Build a Node.js App"}}},{"node":{"frontmatter":{"order":4.2,"path":"/more-complicated-nodejs-app","title":"A More Complicated Node.js App"}}},{"node":{"frontmatter":{"order":4.4,"path":"/expose","title":"A Note on EXPOSE"}}},{"node":{"frontmatter":{"order":4.5,"path":"/layers","title":"Layers"}}},{"node":{"frontmatter":{"order":5,"path":"/alpine-linux","title":"Alpine Linux"}}},{"node":{"frontmatter":{"order":5.1,"path":"/making-our-own-alpine-nodejs-container","title":"Making Our Own Alpine Node.js Container"}}},{"node":{"frontmatter":{"order":5.2,"path":"/multi-stage-builds","title":"Multi Stage Builds"}}},{"node":{"frontmatter":{"order":5.3,"path":"/static-assets-project","title":"Static Assets Project"}}},{"node":{"frontmatter":{"order":6,"path":"/bind-mounts","title":"Bind Mounts"}}},{"node":{"frontmatter":{"order":6.1,"path":"/volumes","title":"Volumes"}}},{"node":{"frontmatter":{"order":6.2,"path":"/dev-containers","title":"Using Containers for your Dev Environment"}}},{"node":{"frontmatter":{"order":6.3,"path":"/visual-studio-code","title":"Dev Containers with Visual Studio Code"}}},{"node":{"frontmatter":{"order":6.4,"path":"/networking","title":"Networking with Docker"}}},{"node":{"frontmatter":{"order":7,"path":"/docker-compose","title":"Docker Compose"}}},{"node":{"frontmatter":{"order":7.1,"path":"/kubernetes","title":"Kubernetes"}}},{"node":{"frontmatter":{"order":7.2,"path":"/kompose","title":"Kompose"}}},{"node":{"frontmatter":{"order":8,"path":"/buildah","title":"Buildah"}}},{"node":{"frontmatter":{"order":8.1,"path":"/podman","title":"Podman"}}},{"node":{"frontmatter":{"order":9,"path":"/conclusion","title":"Conclusion"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}