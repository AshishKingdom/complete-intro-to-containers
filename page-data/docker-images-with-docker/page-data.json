{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/docker-images-with-docker",
    "result": {"data":{"markdownRemark":{"html":"<h3 id=\"docker-images-with-docker\" style=\"position:relative;\"><a href=\"#docker-images-with-docker\" aria-label=\"docker images with docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Images with Docker</h3>\n<p>So it's much easier to do what we did with Docker. Run this command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run --interactive --tty alpine:3.10 <span class=\"token comment\"># or, to be shorter: docker run -it alpine:3.10</span></code></pre></div>\n<p>A bit easier to remember, right? This will drop you into a Alpine ash shell inside of a container as the root user of that container. When you're done, just run <code class=\"language-text\">exit</code> or hit CTRL+D. Notice that this will grab the [alpine][alpine] image from Docker for you and run it. The <code class=\"language-text\">run</code> part of the command is telling Docker you're going to be executing a container (as opposed to building it.) The <code class=\"language-text\">-it</code> part says you want to be dropped into the container interactively so you can run commands and inspect the container. By default containers run and then exit as soon as they're done. Go ahead and try <code class=\"language-text\">docker run alpine:3.10</code>. It'll look it did nothing but it actually starts the container and then, because it has nothing defined for it to do, it just exits.</p>\n<p>So what if you wanted it to execute something? Try this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run alpine:3.10 <span class=\"token function\">ls</span></code></pre></div>\n<p>Or let's switch to Ubuntu now, since it's more familiar to most. We'll talk about Alpine later on in-depth.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run ubuntu:bionic <span class=\"token function\">ls</span></code></pre></div>\n<p>The <code class=\"language-text\">ls</code> part at the end is what you pass into the container to be run. As you can see here, it executes the command, outputs the results, and shuts down the container. This is great for running a Node.js server. Since it doesn't exit, it'll keep running until the server crashes or the server exits itself.</p>\n<p>So now what if we want to detach the container running from the foreground? Let's try that.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run --detach -it ubuntu:bionic <span class=\"token comment\"># or, to be shorter: docker run -dit ubuntu:bionic</span></code></pre></div>\n<p>So it prints a long hash out and then nothing. Oh no! What happened to it!? Well, it's running in the background. So how do we get ahold of it?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span></code></pre></div>\n<p>This will print out all the running containers that Docker is managing for you. You should see your container there. So copy the ID or the name and say:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> attach <span class=\"token operator\">&lt;</span>ID or name<span class=\"token operator\">></span> <span class=\"token comment\"># e.g. `docker attach 20919c49d6e5` would attach to that container</span></code></pre></div>\n<p>This allows you to attach a shell to a running container and mess around with it. Useful if you need to inspect something or see running logs. Feel free to type <code class=\"language-text\">exit</code> to get out of here. Run <code class=\"language-text\">docker run -dit ubuntu:bionic</code> one more time. Let's kill this container without attaching to it. Run <code class=\"language-text\">docker ps</code>, get the IDs or names of the containers you want to kill and say:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">kill</span> <span class=\"token operator\">&lt;</span>IDs or names of containers<span class=\"token operator\">></span> <span class=\"token comment\"># e.g. `docker kill fae0f0974d3d 803e1721dad3 20919c49d6e5` would kill those three containers</span></code></pre></div>\n<p>A fun way to kill all running containers would be</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">kill</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -q<span class=\"token variable\">)</span></span></code></pre></div>\n<p>The <code class=\"language-text\">$()</code> portion of that will evaluate whatever is inside of that first and plug its output into the second command. In this case, <code class=\"language-text\">docker ps -q</code> returns all the IDs and nothing else. These are then passed to <code class=\"language-text\">docker kill</code> which will kill all those IDs. Neat!</p>\n<h2 id=\"--name-and---rm\" style=\"position:relative;\"><a href=\"#--name-and---rm\" aria-label=\"  name and   rm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>--name and --rm</h2>\n<p>Let's make it a bit easier to keep track of these. Try this</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -dit --name my-ubuntu ubuntu:bionic\n<span class=\"token function\">docker</span> <span class=\"token function\">kill</span> my-ubuntu</code></pre></div>\n<p>Now you can refer to these by a name you set. But now if you tried it again, it'd say that <code class=\"language-text\">my-ubuntu</code> exists. If you run <code class=\"language-text\">docker ps --all</code> you'll see that the container exists even if it's been stopped. That's because Docker keeps this metadata around until you tell it to stop doing that. You can run <code class=\"language-text\">docker rm my-ubuntu</code> which will free up that name or you can run <code class=\"language-text\">docker container prune</code> to free up all existing stopped containers (and free up some disk space.)</p>\n<p>In the future you can just do</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run --rm -dit --name my-ubuntu ubuntu:bionic\n<span class=\"token function\">docker</span> <span class=\"token function\">kill</span> my-ubuntu</code></pre></div>\n<p>This will automatically clean up the container when it's done.</p>","frontmatter":{"path":"/docker-images-with-docker","title":"Docker Images with Docker","order":3.2,"section":"Docker","description":"Brian will now show you how to use the Docker CLI directly to use images and how the Docker command line client works with regard to images of containers."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":1,"path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":2,"path":"/what-are-containers","title":"What Are Containers?"}}},{"node":{"frontmatter":{"order":2.1,"path":"/chroot","title":"chroot"}}},{"node":{"frontmatter":{"order":2.2,"path":"/namespaces","title":"Namespaces"}}},{"node":{"frontmatter":{"order":2.3,"path":"/cgroups","title":"cgroups"}}},{"node":{"frontmatter":{"order":3,"path":"/getting-set-up-with-docker","title":"Getting Set Up with Docker"}}},{"node":{"frontmatter":{"order":3.1,"path":"/docker-images-without-docker","title":"Docker Images without Docker"}}},{"node":{"frontmatter":{"order":3.2,"path":"/docker-images-with-docker","title":"Docker Images with Docker"}}},{"node":{"frontmatter":{"order":3.3,"path":"/nodejs-on-docker","title":"Node.js on Docker"}}},{"node":{"frontmatter":{"order":3.4,"path":"/tags","title":"Tags"}}},{"node":{"frontmatter":{"order":3.5,"path":"/docker-cli","title":"Docker CLI"}}},{"node":{"frontmatter":{"order":4,"path":"/dockerfile","title":"Intro to Dockerfiles"}}},{"node":{"frontmatter":{"order":4.1,"path":"/build-a-nodejs-app","title":"Build a Node.js App"}}},{"node":{"frontmatter":{"order":4.2,"path":"/more-complicated-nodejs-app","title":"A More Complicated Node.js App"}}},{"node":{"frontmatter":{"order":4.4,"path":"/expose","title":"A Note on EXPOSE"}}},{"node":{"frontmatter":{"order":4.5,"path":"/layers","title":"Layers"}}},{"node":{"frontmatter":{"order":5,"path":"/alpine-linux","title":"Alpine Linux"}}},{"node":{"frontmatter":{"order":5.1,"path":"/making-our-own-alpine-nodejs-container","title":"Making Our Own Alpine Node.js Container"}}},{"node":{"frontmatter":{"order":5.2,"path":"/multi-stage-builds","title":"Multi Stage Builds"}}},{"node":{"frontmatter":{"order":5.3,"path":"/static-assets-project","title":"Static Assets Project"}}},{"node":{"frontmatter":{"order":6,"path":"/bind-mounts","title":"Bind Mounts"}}},{"node":{"frontmatter":{"order":6.1,"path":"/volumes","title":"Volumes"}}},{"node":{"frontmatter":{"order":6.2,"path":"/dev-containers","title":"Using Containers for your Dev Environment"}}},{"node":{"frontmatter":{"order":6.3,"path":"/visual-studio-code","title":"Dev Containers with Visual Studio Code"}}},{"node":{"frontmatter":{"order":6.4,"path":"/networking","title":"Networking with Docker"}}},{"node":{"frontmatter":{"order":7,"path":"/docker-compose","title":"Docker Compose"}}},{"node":{"frontmatter":{"order":7.1,"path":"/kubernetes","title":"Kubernetes"}}},{"node":{"frontmatter":{"order":7.2,"path":"/kompose","title":"Kompose"}}},{"node":{"frontmatter":{"order":8,"path":"/buildah","title":"Buildah"}}},{"node":{"frontmatter":{"order":8.1,"path":"/podman","title":"Podman"}}},{"node":{"frontmatter":{"order":9,"path":"/conclusion","title":"Conclusion"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}