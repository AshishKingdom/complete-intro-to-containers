{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/dockerfile",
    "result": {"data":{"markdownRemark":{"html":"<p>So far we've been focusing a lot on running containers and haven't much dug into building them. This is on purpose because most of benefit of containers for developers comes from the running of containers. If you learn one thing, it should be how to run them.</p>\n<p>That said, let's learn to build our own containers. We'll again be using Docker for this though there are other ways to do this. Docker has a special file called a <code class=\"language-text\">Dockerfile</code> which allows you to outline how a container will be built. Each line in a Docker file is a new a directive of how to change your Docker container.</p>\n<p>A <em>big key</em> with Docker container is that they're supposed to be disposable. You should be able to create them and throw them away as many times as necessary. In other words: adopt a mindset of making everything short-lived. There are other, better tools for long-running, custom containers.</p>\n<p>Let's make the most basic Dockerfile ever. Let's make a new folder, maybe on your desktop. Put a file in there called <code class=\"language-text\">Dockerfile</code> (no extension.) In your file, put this.</p>\n<h2 id=\"the-most-basic-dockerfile-based-container\" style=\"position:relative;\"><a href=\"#the-most-basic-dockerfile-based-container\" aria-label=\"the most basic dockerfile based container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The most basic Dockerfile-based Container</h2>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:12-stretch</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"node\"</span>, <span class=\"token string\">\"-e\"</span>, <span class=\"token string\">\"console.log(\\\"hi lol\\\")\"</span>]</span></code></pre></div>\n<p>The first thing on each line (<code class=\"language-text\">FROM</code> and <code class=\"language-text\">CMD</code> in this case) are called <em>instructions</em>. They don't technically have to be all caps but it's convention to do so so that the file is easier to read. Each one of these instruction incrementally changes the container from the state it was in previously, adding what we call a <em>layer</em>.</p>\n<p>Let's go ahead and build our container. Run (from inside of the directory of where your Dockerfile is)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>You should see it out put a bunch of stuff and it'll leave you with the hash of an image. After each instruction, you'll see a hash similar to the ones we've been using for the IDs for the containers. You know why that is? It's because each one of those layers is in-and-of themselves a valid container image! This ends up being important later and we'll discuss it in a bit.</p>\n<p>Our container has two instructions in its Dockerfile, but actually it has many, many more. How? The first instruction, <code class=\"language-text\">FROM node:12-stretch</code> actually means <em>start</em> with the <code class=\"language-text\">node</code> container. That container itself <a href=\"https://github.com/nodejs/docker-node/blob/master/Dockerfile-debian.template\">comes from another Dockerfile</a> which build its own container, which itself <a href=\"https://github.com/docker-library/buildpack-deps\">comes from another Dockerfile</a>, which comes ultimately from the <a href=\"https://hub.docker.com/_/debian/\">Debian</a> image.</p>\n<p>This is something very powerful about Docker: you can use images to build other images and build on the work of others. Instead of having to worry about how to install Debian and all the necessary items to build Node.js from its source, we can just start with a well-put-together image from the community.</p>\n<p>Okay, so we start with <code class=\"language-text\">node:12-stretch</code> and then we add the <code class=\"language-text\">CMD</code> instruction. There will only ever be one of these in effect in a Dockerfile. If you have multiple it'll just take the last one. This is what you want Docker to do when someone runs the container. In our case, we're running <code class=\"language-text\">node -e \"console.log('hi lol')\"</code> from within the container. <code class=\"language-text\">node -e</code>, if you don't know, will run whatever is inside of the quotes with Node.js. In this case, we're logging out <code class=\"language-text\">hi lol</code> to the console.</p>\n<p>You <em>can</em> put <code class=\"language-text\">CMD node -e \"console.log('hi lol')\"</code> as that last line and it'll work but it's not the preferred way of doing it. This won't actually go through bash which itself is simpler and usually safer. I do it this way because the docs strongly encourage you to do it this way.</p>\n<p>So, in essence, our containers nabs a <code class=\"language-text\">node:12-stretch</code> container and then when we have it execute a <code class=\"language-text\">node</code> command when you run it. Let's try it. Grab the hash from your build and run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token operator\">&lt;</span>ID<span class=\"token operator\">></span></code></pre></div>\n<p>It's a little inconvenient to always have to refer to it by ID, it'd be easier if it had a name. So let's do that! Try</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token builtin class-name\">.</span> --tag my-node-app <span class=\"token comment\">## or -t instead of --tag</span>\n<span class=\"token function\">docker</span> run my-node-app</code></pre></div>\n<p>Much easier to remember the name rather than a hash. If you want to version it yourself, you can totally do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build -t my-node-app:1 <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">docker</span> run my-node-app:1</code></pre></div>\n<p>Now change your <code class=\"language-text\">Dockerfile</code> so that it logs out <code class=\"language-text\">wat</code> instead of <code class=\"language-text\">hi lol</code>. After you do that.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build -t my-node-app:2 <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">docker</span> run my-node-app:2\n<span class=\"token function\">docker</span> run my-node-app:1</code></pre></div>\n<p>You can version your containers and hold on to older ones, just in case!</p>","frontmatter":{"path":"/dockerfile","title":"Intro to Dockerfiles","order":4,"section":"The Dockerfile","description":"Docker has a special file called a `Dockerfile` which allows you to outline how a container will be built. Each line in a Docker file is a new a directive of how to change your Docker container. Brian goes into the basics of write a Dockerfile here."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":1,"path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":2,"path":"/what-are-containers","title":"What Are Containers?"}}},{"node":{"frontmatter":{"order":2.1,"path":"/chroot","title":"chroot"}}},{"node":{"frontmatter":{"order":2.2,"path":"/namespaces","title":"Namespaces"}}},{"node":{"frontmatter":{"order":2.3,"path":"/cgroups","title":"cgroups"}}},{"node":{"frontmatter":{"order":3,"path":"/getting-set-up-with-docker","title":"Getting Set Up with Docker"}}},{"node":{"frontmatter":{"order":3.1,"path":"/docker-images-without-docker","title":"Docker Images without Docker"}}},{"node":{"frontmatter":{"order":3.2,"path":"/docker-images-with-docker","title":"Docker Images with Docker"}}},{"node":{"frontmatter":{"order":3.3,"path":"/nodejs-on-docker","title":"Node.js on Docker"}}},{"node":{"frontmatter":{"order":3.4,"path":"/tags","title":"Tags"}}},{"node":{"frontmatter":{"order":3.5,"path":"/docker-cli","title":"Docker CLI"}}},{"node":{"frontmatter":{"order":4,"path":"/dockerfile","title":"Intro to Dockerfiles"}}},{"node":{"frontmatter":{"order":4.1,"path":"/build-a-nodejs-app","title":"Build a Node.js App"}}},{"node":{"frontmatter":{"order":4.2,"path":"/more-complicated-nodejs-app","title":"A More Complicated Node.js App"}}},{"node":{"frontmatter":{"order":4.4,"path":"/expose","title":"A Note on EXPOSE"}}},{"node":{"frontmatter":{"order":4.5,"path":"/layers","title":"Layers"}}},{"node":{"frontmatter":{"order":5,"path":"/alpine-linux","title":"Alpine Linux"}}},{"node":{"frontmatter":{"order":5.1,"path":"/making-our-own-alpine-nodejs-container","title":"Making Our Own Alpine Node.js Container"}}},{"node":{"frontmatter":{"order":5.2,"path":"/multi-stage-builds","title":"Multi Stage Builds"}}},{"node":{"frontmatter":{"order":5.3,"path":"/static-assets-project","title":"Static Assets Project"}}},{"node":{"frontmatter":{"order":6,"path":"/bind-mounts","title":"Bind Mounts"}}},{"node":{"frontmatter":{"order":6.1,"path":"/volumes","title":"Volumes"}}},{"node":{"frontmatter":{"order":6.2,"path":"/dev-containers","title":"Using Containers for your Dev Environment"}}},{"node":{"frontmatter":{"order":6.3,"path":"/visual-studio-code","title":"Dev Containers with Visual Studio Code"}}},{"node":{"frontmatter":{"order":6.4,"path":"/networking","title":"Networking with Docker"}}},{"node":{"frontmatter":{"order":7,"path":"/docker-compose","title":"Docker Compose"}}},{"node":{"frontmatter":{"order":7.1,"path":"/kubernetes","title":"Kubernetes"}}},{"node":{"frontmatter":{"order":7.2,"path":"/kompose","title":"Kompose"}}},{"node":{"frontmatter":{"order":8,"path":"/buildah","title":"Buildah"}}},{"node":{"frontmatter":{"order":8.1,"path":"/podman","title":"Podman"}}},{"node":{"frontmatter":{"order":9,"path":"/conclusion","title":"Conclusion"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}